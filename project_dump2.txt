<?php
// placeholder to avoid autoload crash
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Attendance extends Model
{
    use HasFactory;

    protected $fillable = [
        'status',
        'user_id',
        'check_in',
        'check_out',
        'worked_hours'
    ];

    protected $casts = [
        'check_in' => 'datetime',
        'check_out' => 'datetime',
        'worked_hours' => 'decimal:2'
    ];

    /**
     * Get the user that owns the attendance record.
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use Notifiable;

    protected $fillable = [
        'name', 
        'email', 
        'password',
        'department',
        'designation',
        'joining_date',
        'phone',
        'gender'
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'joining_date' => 'date',
    ];

    /**
     * Get the tasks assigned to the user.
     */
    public function tasks()
    {
        return $this->hasMany(Task::class, 'assigned_to');
    }
}<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Task extends Model
{
    protected $fillable = [
        'title',
        'description',
        'status',
        'assigned_to',
        'deadline'
    ];

    protected $casts = [
        'deadline' => 'date',
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'assigned_to');
    }
}<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class Admin extends Authenticatable
{
    use Notifiable;

    protected $fillable = [
        'name', 'email', 'password',
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];
}
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;

class Authenticate
{
    public function handle($request, Closure $next)
    {
        if (!Auth::check()) {
            return redirect()->route('users.login'); // or 'admin.login' based on route
        }

        return $next($request);
    }
}

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticatedCustom
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }
}
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use App\Models\Task;
use App\Models\Attendance;
use Carbon\Carbon;

class UserDashboardController extends Controller
{
    public function index() {
        $user = Auth::user();
        
        // Get task statistics for the logged-in user
        $tasks = Task::where('assigned_to', $user->id)->get();
        
        $taskStats = [
            'assigned' => $tasks->count(),
            'completed' => $tasks->where('status', 'completed')->count(),
            'pending' => $tasks->where('status', 'pending')->count(),
            'in_progress' => $tasks->where('status', 'in_progress')->count(),
        ];

        // Get today's attendance
        $todayAttendance = Attendance::where('user_id', $user->id)
            ->whereDate('check_in', today())
            ->first();

        $hasCheckedInToday = $todayAttendance !== null;
        $hasCheckedOutToday = $hasCheckedInToday && $todayAttendance->check_out !== null;

        return view('users.dashboard', compact(
            'user', 
            'tasks', 
            'taskStats',
            'todayAttendance',
            'hasCheckedInToday',
            'hasCheckedOutToday'
        ));
    }
}<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class AdminAuthController extends Controller
{
    public function showLoginForm()
    {
        if (Auth::check()) {
        return redirect()->route('admin.dashboard');
    }
        return view('admin.login');
    }

    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required|min:3',
        ]);

        if (Auth::guard('admin')->attempt($request->only('email', 'password'))) {
            return redirect()->route('admin.dashboard'); // FIXED: Correct route name
        }

        return back()->withErrors(['email' => 'Invalid credentials'])->withInput(); // Better error message
    }

    public function logout()
    {
        Auth::guard('admin')->logout();
        return redirect()->route('admin.login');
    }
}<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Attendance;
use Carbon\Carbon;

class AttendanceController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function checkIn(Request $request)
    {
        $user = Auth::user();
        
        // Get today's attendance or create a new one if not exists
        $attendance = Attendance::firstOrCreate(
            [
                'user_id' => $user->id,
                'check_in' => null,
                'status' => 'absent',
            ],
            [
                'check_in' => now(),
                'status' => 'present',
                'worked_hours' => 0
            ]
        );

        // If user already checked in today
        if ($attendance->check_in) {
            return redirect()->back()->with('error', 'You have already checked in today');
        }

        // Update record for today's check-in
        $attendance->update([
            'check_in' => now(),
            'status' => 'present'
        ]);

        return redirect()->back()->with('success', 'Check-in successful at ' . now()->format('H:i:s'));
    }

    public function checkOut(Request $request)
    {
        $user = Auth::user();

        // Get today's attendance record
        $attendance = Attendance::where('user_id', $user->id)
            ->whereDate('check_in', today())
            ->first();

        if (!$attendance) {
            return redirect()->back()->with('error', 'You need to check in first');
        }

        if ($attendance->check_out) {
            return redirect()->back()->with('error', 'You have already checked out today');
        }

        // Calculate worked hours
        $checkInTime = Carbon::parse($attendance->check_in);
        $checkOutTime = now();
        $workedHours = $checkOutTime->diffInMinutes($checkInTime) / 60;

        // Update today's record
        $attendance->update([
            'check_out' => $checkOutTime,
            'status' => 'Checked-out',
            'worked_hours' => round($workedHours, 2)
        ]);

        return redirect()->back()->with('success', 'Check-out successful at ' . $checkOutTime->format('H:i:s') . '. Worked: ' . round($workedHours, 2) . ' hours');
    }

    public function getUserAttendance($userId = null)
    {
        $userId = $userId ?? Auth::id();

        return Attendance::where('user_id', $userId)
            ->orderBy('check_in', 'desc')
            ->get();
    }
}
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;

class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except('logout');
        $this->middleware('auth')->only('logout');
    }
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ResetsPasswords;

class ResetPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset requests
    | and uses a simple trait to include this behavior. You're free to
    | explore this trait and override any methods you wish to tweak.
    |
    */

    use ResetsPasswords;

    /**
     * Where to redirect users after resetting their password.
     *
     * @var string
     */
    protected $redirectTo = '/home';
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\Models\User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);
    }
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;

class ForgotPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset emails and
    | includes a trait which assists in sending these notifications from
    | your application to your users. Feel free to explore this trait.
    |
    */

    use SendsPasswordResetEmails;
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\VerifiesEmails;

class VerificationController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Email Verification Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling email verification for any
    | user that recently registered with the application. Emails may also
    | be re-sent if the user didn't receive the original email message.
    |
    */

    use VerifiesEmails;

    /**
     * Where to redirect users after verification.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('signed')->only('verify');
        $this->middleware('throttle:6,1')->only('verify', 'resend');
    }
}
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ConfirmsPasswords;

class ConfirmPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Confirm Password Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password confirmations and
    | uses a simple trait to include the behavior. You're free to explore
    | this trait and override any functions that require customization.
    |
    */

    use ConfirmsPasswords;

    /**
     * Where to redirect users when the intended url fails.
     *
     * @var string
     */
    protected $redirectTo = '/home';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }
}
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Task;
use App\Models\User;

class TaskController extends Controller
{
   public function __construct()
{
    $this->middleware(function ($request, $next) {
        if (Auth::guard('admin')->check() || Auth::guard()->check()) {
            return $next($request);
        }

        abort(403, 'Unauthorized');
    });
}


    public function updateStatus(Request $request, $id)
    {
        $task = Task::findOrFail($id);
        $user = Auth::user();

        // Check if the task is assigned to the current user
        if ($task->assigned_to !== $user->id) {
            return response()->json([
                'success' => false,
                'message' => 'Unauthorized action'
            ], 403);
        }

        $request->validate([
            'status' => 'required|in:pending,in_progress,completed'
        ]);

        $task->status = $request->status;
        $task->save();

        // Return JSON response for AJAX requests
        if ($request->wantsJson() || $request->ajax()) {
            return response()->json([
                'success' => true,
                'message' => 'Task status updated successfully'
            ]);
        }

        return redirect()->back()->with('success', 'Task status updated successfully');
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'deadline' => 'nullable|date',
        ]);

        Task::create([
            'title' => $validated['title'],
            'description' => $validated['description'] ?? null,
            'deadline' => $validated['deadline'] ?? null,
            'status' => 'unknown', // Default status
            'assigned_to' => null, // Initially unassigned
        ]);

        return redirect()->back()->with('success', 'Task created successfully.');
    }

    public function assign(Request $request)
    {
        $validated = $request->validate([
            'task_id' => 'required|exists:tasks,id',
            'assigned_to' => 'required|exists:users,id',
        ]);

        $task = Task::find($validated['task_id']);
        $task->assigned_to = $validated['assigned_to'];
        $task->status = 'pending'; // Change status when assigned
        $task->save();

        return redirect()->back()->with('success', 'Task assigned successfully.');
    }

    // NEW: Delete task functionality
    public function destroy($id)
    {
        $task = Task::findOrFail($id);
        
        // Admin can delete any task, users can only delete their own
        if (Auth::guard('admin')->check() || $task->assigned_to === Auth::id()) {
            $task->delete();
            return redirect()->back()->with('success', 'Task deleted successfully.');
        }

        return redirect()->back()->with('error', 'Unauthorized action.');
    }
public function update(Request $request, $id)
{
    $task = Task::findOrFail($id);
    
    // Authorization check - allow admin or task owner
    if (!Auth::guard('admin')->check() && $task->assigned_to !== Auth::id()) {
        return redirect()->back()->with('error', 'Unauthorized action.');
    }

    $validated = $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'nullable|string',
        'deadline' => 'nullable|date',
    ]);

    $task->update($validated);

    return redirect()->back()->with('success', 'Task updated successfully.');
}

}<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        return view('home');
    }
}
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use App\Models\Task;
use App\Models\Attendance;

class AdminDashboardController extends Controller
{
    public function index()
    {
        if (!Auth::guard('admin')->check()) {
            return redirect()->route('admin.login');
        }

        $users = User::all();
        $tasks = Task::with('user')->get();
        $attendanceRecords = Attendance::with('user')
            ->orderBy('check_in', 'desc')
            ->take(20) // Show last 20 records
            ->get();

        // Calculate idle users (users with no assigned tasks or all tasks completed)
        $idleUsersCount = $users->filter(function($user) {
            $userTasks = $user->tasks;
            return $userTasks->isEmpty() || $userTasks->where('status', '!=', 'completed')->isEmpty();
        })->count();

        return view('admin.dashboard', [
            'users' => $users,
            'usersCount' => $users->count(),
            'idleUsersCount' => $idleUsersCount,
            'tasks' => $tasks,
            'tasksCount' => $tasks->count(),
            'attendanceRecords' => $attendanceRecords
        ]);
    }
}<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;

class UserAuthController extends Controller
{
    public function showLoginForm() {
        if (Auth::check()) {
        return redirect()->route('users.dashboard');
    }
        return view('users.login');
    }

    public function login(Request $request) {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials)) {
            $request->session()->regenerate();
            return redirect()->intended(route('users.dashboard'));
        }

        return back()->withErrors(['email' => 'Invalid credentials'])->withInput();
    }

    public function logout(Request $request) {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();
        return redirect(route('users.login'));
    }

    public function showSignupForm() {
        return view('users.signup');
    }

    public function register(Request $request) {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|min:6|confirmed',
            'department' => 'nullable|string|max:255',
            'designation' => 'nullable|string|max:255',
            'joining_date' => 'nullable|date',
            'phone' => 'nullable|string|max:255',
            'gender' => 'nullable|in:male,female,other'
        ]);

        $user = User::create([
            'name' => $validated['name'],
            'email' => $validated['email'],
            'password' => bcrypt($validated['password']),
            'department' => $validated['department'] ?? null,
            'designation' => $validated['designation'] ?? null,
            'joining_date' => $validated['joining_date'] ?? null,
            'phone' => $validated['phone'] ?? null,
            'gender' => $validated['gender'] ?? null,
        ]);

        Auth::login($user);
        $request->session()->regenerate();
        return redirect(route('users.dashboard'));
    }
    public function updateProfile(Request $request)
{
    $user = Auth::user();
    
    $validated = $request->validate([
        'name' => 'required|string|max:255',
        'department' => 'nullable|string|max:255',
        'designation' => 'nullable|string|max:255',
        'joining_date' => 'nullable|date',
        'phone' => 'nullable|string|max:255',
        'gender' => 'nullable|in:male,female,other',
    ]);
    
    $user->update($validated);
    
    return redirect()->back()->with('success', 'Profile updated successfully.');
}
}<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;

class SignupController extends Controller
{
    public function showForm()
    {
        return view('users.signup');
    }

    public function signup(Request $request)
    {
        $validated = $request->validate([
            'name'         => 'required|string|max:255',
            'email'        => 'required|email|unique:users,email',
            'password'     => 'required|string|min:6|confirmed',
            'department'   => 'nullable|string|max:255',
            'designation'  => 'nullable|string|max:255',
            'joining_date' => 'nullable|date',
            'phone'        => 'nullable|string|max:255',
            'gender'       => 'nullable|in:male,female,other',
        ]);

        $validated['password'] = bcrypt($validated['password']);

        $user = User::create($validated);

        Auth::login($user);

        return redirect()->route('dashboard');
    }
}
<?php
namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class SendOtpMail extends Mailable
{
    use Queueable, SerializesModels;

    public $otp;

    public function __construct($otp)
    {
        $this->otp = $otp;
    }

    public function build()
    {
        
        return $this->subject('Your NexHRM OTP')
                    ->view('emails.otp');
    }
}
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\UserAuthController;
use App\Http\Controllers\AdminAuthController;
use App\Http\Controllers\UserDashboardController;
use App\Http\Controllers\AdminDashboardController;
use App\Http\Controllers\AttendanceController;
use App\Http\Controllers\TaskController;
use Illuminate\Support\Facades\Auth;


Route::get('/', fn() => view('home'))->name('home');

// User Auth
Route::get('/users/login', [UserAuthController::class, 'showLoginForm'])->name('users.login');
Route::post('/users/login', [UserAuthController::class, 'login'])->name('users.login.submit');
Route::post('/users/logout', [UserAuthController::class, 'logout'])->name('users.logout');
Route::get('/users/signup', [UserAuthController::class, 'showSignupForm'])->name('users.signup');
Route::post('/users/signup', [UserAuthController::class, 'register'])->name('users.signup.submit');

// Admin Auth
Route::get('/admin/login', [AdminAuthController::class, 'showLoginForm'])->name('admin.login');
Route::post('/admin/login', [AdminAuthController::class, 'login'])->name('admin.login.submit');
Route::post('/admin/logout', [AdminAuthController::class, 'logout'])->name('admin.logout');

// Attendance Routes
Route::middleware('auth')->group(function () {
    Route::post('/attendance/checkin', [AttendanceController::class, 'checkIn'])->name('attendance.checkin');
    Route::post('/attendance/checkout', [AttendanceController::class, 'checkOut'])->name('attendance.checkout');
});

// Task Routes - FIXED: Added admin-specific routes
Route::middleware('auth')->group(function () {
    Route::post('/tasks/{id}/status', [TaskController::class, 'updateStatus'])->name('tasks.update');
    Route::post('/tasks', [TaskController::class, 'store'])->name('tasks.store');
    Route::post('/tasks/assign', [TaskController::class, 'assign'])->name('tasks.assign');
    Route::delete('/tasks/{id}', [TaskController::class, 'destroy'])->name('tasks.destroy'); // Added delete route
});

// Admin Task Routes - NEW: Separate routes for admin
Route::middleware('auth:admin')->group(function () {
    Route::post('/admin/tasks', [TaskController::class, 'store'])->name('admin.tasks.store'); // FIXED: This was missing
    Route::post('/admin/tasks/assign', [TaskController::class, 'assign'])->name('admin.tasks.assign');
    Route::delete('/admin/tasks/{id}', [TaskController::class, 'destroy'])->name('admin.tasks.destroy');
});

// Protected Dashboards
Route::middleware('auth')->group(function () {
    Route::get('/users/dashboard', [UserDashboardController::class, 'index'])->name('users.dashboard');
});

Route::middleware('auth:admin')->group(function () {
    Route::get('/admin/dashboard', [AdminDashboardController::class, 'index'])->name('admin.dashboard');
});

// Logout route
Route::post('/logout', function () {
    Auth::logout();
    return redirect('/users/login');
})->name('logout');
// Attendance history route
Route::middleware('auth')->group(function () {
    Route::get('/attendance/history', [AttendanceController::class, 'getUserAttendance'])
        ->name('attendance.history');
});
Route::middleware('auth')->group(function () {
    // ... other routes
    Route::post('/users/profile/update', [UserAuthController::class, 'updateProfile'])->name('users.profile.update');
});


Route::put('/admin/tasks/{task}', [TaskController::class, 'update'])->name('admin.tasks.update');

<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
import 'bootstrap';

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ?? `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });
import './bootstrap';
<!doctype html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="dns-prefetch" href="//fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=Nunito" rel="stylesheet">

    <!-- Scripts -->
    @vite(['resources/sass/app.scss', 'resources/js/app.js'])
</head>
<body>
    <div id="app">
        <nav class="navbar navbar-expand-md navbar-light bg-white shadow-sm">
            <div class="container">
                <a class="navbar-brand" href="{{ url('/') }}">
                    {{ config('app.name', 'Laravel') }}
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <!-- Left Side Of Navbar -->
                    <ul class="navbar-nav me-auto">

                    </ul>

                    <!-- Right Side Of Navbar -->
                    <ul class="navbar-nav ms-auto">
                        <!-- Authentication Links -->
                        @guest
                            @if (Route::has('users.login'))
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('login') }}">{{ __('Login') }}</a>
                                </li>
                            @endif

                            @if (Route::has('register'))
                                <li class="nav-item">
                                    <a class="nav-link" href="{{ route('register') }}">{{ __('Register') }}</a>
                                </li>
                            @endif
                        @else
                            <li class="nav-item dropdown">
                                <a id="navbarDropdown" class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-pre>
                                    {{ Auth::user()->name }}
                                </a>

                                <div class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                    <a class="dropdown-item" href="{{ route('logout') }}"
                                       onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                        {{ __('Logout') }}
                                    </a>

                                    <form id="logout-form" action="{{ route('logout') }}" method="POST" class="d-none">
                                        @csrf
                                    </form>
                                </div>
                            </li>
                        @endguest
                    </ul>
                </div>
            </div>
        </nav>

        <main class="py-4">
            @yield('content')
        </main>
    </div>
</body>
</html>
<!-- resources/views/layouts/admin.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="{{ asset('css/admin.css') }}">
</head>
<body>
    <div class="admin-wrapper">
        @yield('content')
    </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Forgot Password - NexHRM</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            --card-bg: rgba(255, 255, 255, 0.1);
            --text-light: #ffffff;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            font-family: 'Segoe UI', sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
        }

        .login-card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
            transition: transform var(--transition-speed);
        }

        .login-card h2 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: var(--text-light);
        }

        .form-control::placeholder {
            color: #e0e0e0;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: none;
            color: var(--text-light);
        }

        .btn-primary {
            background-color: #00bfff;
            border: none;
            font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #0099cc;
        }

        .text-danger {
            font-size: 0.85rem;
        }

        .success-message {
            color: #ddffdd;
            font-size: 0.9rem;
            margin-bottom: 15px;
            text-align: center;
        }

        .error-message {
            color: #ffdddd;
            font-size: 0.9rem;
            margin-bottom: 15px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2>Forgot Password</h2>

        @if ($errors->any())
            <div class="error-message">
                @foreach ($errors->all() as $error)
                    <p>{{ $error }}</p>
                @endforeach
            </div>
        @endif

        @if (session('status'))
            <div class="success-message">
                <p>{{ session('status') }}</p>
            </div>
        @endif

        <form method="POST" action="{{ route('users.forgot.submit') }}">
            @csrf
            <div class="mb-3">
                <input type="email" name="email" class="form-control" placeholder="Enter your email" required>
                @error('email')
                    <small class="text-danger">{{ $message }}</small>
                @enderror
            </div>
            <button type="submit" class="btn btn-primary w-100">Send OTP</button>
        </form>

        <div class="mt-3 text-center">
            <a href="{{ route('users.login') }}" class="text-light text-decoration-underline" style="font-size: 0.9rem;">
                Back to Login
            </a>
        </div>
    </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Verify OTP - NexHRM</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            --card-bg: rgba(255, 255, 255, 0.1);
            --text-light: #ffffff;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            font-family: 'Segoe UI', sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
        }

        .login-card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
            transition: transform var(--transition-speed);
        }

        .login-card h2 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: var(--text-light);
        }

        .form-control::placeholder {
            color: #e0e0e0;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: none;
            color: var(--text-light);
        }

        .btn-primary {
            background-color: #00bfff;
            border: none;
            font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #0099cc;
        }

        .text-danger {
            font-size: 0.85rem;
        }

        .success-message {
            color: #ddffdd;
            font-size: 0.9rem;
            margin-bottom: 15px;
            text-align: center;
        }

        .error-message {
            color: #ffdddd;
            font-size: 0.9rem;
            margin-bottom: 15px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2>Verify OTP</h2>

        @if ($errors->any())
            <div class="error-message">
                @foreach ($errors->all() as $error)
                    <p>{{ $error }}</p>
                @endforeach
            </div>
        @endif

        @if (session('status'))
            <div class="success-message">
                <p>{{ session('status') }}</p>
            </div>
        @endif

        <form method="POST" action="{{ route('users.otp.submit') }}">
            @csrf
            <div class="mb-3">
                <input type="text" name="otp" class="form-control" placeholder="Enter OTP" required>
                @error('otp')
                    <small class="text-danger">{{ $message }}</small>
                @enderror
            </div>
            <button type="submit" class="btn btn-primary w-100">Verify</button>
        </form>
    </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Reset Password - NexHRM</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            --card-bg: rgba(255, 255, 255, 0.1);
            --card-hover-bg: rgba(255, 255, 255, 0.25);
            --text-light: #ffffff;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            font-family: 'Segoe UI', sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
        }

        .login-card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
            transition: transform var(--transition-speed);
        }

        .login-card h2 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: var(--text-light);
        }

        .form-control::placeholder {
            color: #e0e0e0;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: none;
            color: var(--text-light);
        }

        .btn-primary {
            background-color: #00bfff;
            border: none;
            font-weight: bold;
        }

        .btn-primary:hover {
            background-color: #0099cc;
        }

        .text-danger {
            font-size: 0.85rem;
        }

        .success-message {
            font-size: 0.9rem;
            color: #00ffcc;
            text-align: center;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2>Reset Password</h2>

        @if(session('success'))
            <div class="success-message">{{ session('success') }}</div>
        @endif

        <form id="resetForm">
            @csrf
            <div class="mb-3">
                <input type="password" name="password" class="form-control" placeholder="New Password" required>
                @error('password')
                    <small class="text-danger">{{ $message }}</small>
                @enderror
            </div>
            <div class="mb-3">
                <input type="password" name="password_confirmation" class="form-control" placeholder="Confirm Password" required>
            </div>

            <button type="submit" class="btn btn-primary w-100">Reset Password</button>
        </form>
    </div>
</body>
<script>
document.getElementById('resetForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const password = document.querySelector('input[name="password"]').value;
    const password_confirmation = document.querySelector('input[name="password_confirmation"]').value;

    try {
        const res = await fetch("{{ route('users.reset.submit') }}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "X-CSRF-TOKEN": "{{ csrf_token() }}"
            },
            body: JSON.stringify({ password, password_confirmation })
        });

        const data = await res.json();

        if (res.ok) {
            alert("Password reset successful. Redirecting to login...");
            window.location.href = "{{ route('users.login') }}";
        } else {
            // Handle session expired
            if (res.status === 400 && data.message.includes("Session expired")) {
                alert(data.message);
                window.location.href = "{{ route('users.forgot') }}";
                return;
            }

            // Handle validation errors
            if (res.status === 422 && data.errors) {
                const messages = Object.values(data.errors).flat().join("\n");
                alert(messages);
                return;
            }

            // General error fallback
            alert(data.message || "Reset failed");
        }
    } catch (err) {
        console.error("Reset error:", err);
        alert("Something went wrong. Please try again.");
    }
});
</script>

</html>
@if ($errors->any())
    <div class="alert alert-danger mb-3">
        <ul class="mb-0">
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sign Up - NexHRM</title>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #a8a5e2, #083c4d);
            display: flex;
            justify-content: center;
            align-items: center;
            color: #fff;
            font-family: Segoe UI, sans-serif;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 700px; /* wider to fit 2 columns */
        }

        .form-control, .form-select {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: #fff;
        }

        .form-control:focus, .form-select:focus {
            background: rgba(255, 255, 255, 0.3);
            color: #fff;
            box-shadow: none;
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .btn-primary {
            background: #00bfff;
            border: none;
            font-weight: bold;
            width: 100%;
            padding: 10px;
            border-radius: 10px;
            margin-top: 10px;
        }

        .btn-primary:hover {
            background: #0099cc;
        }

        .signup-link {
            text-align: center;
            margin-top: 20px;
        }

        .signup-link a {
            color: #00bfff;
            text-decoration: underline;
        }

        .signup-link a:hover {
            color: #0099cc;
        }

        .password-toggle {
            cursor: pointer;
            position: absolute;
                right: 22px;
    top: 75%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.7);
            font-size: 18px;
            line-height: 1;
        }

        .password-input-group {
            position: relative;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2 class="text-center mb-4">Sign Up</h2>
        <form method="POST" action="{{ route('users.signup.submit') }}">
            @csrf

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="name" class="form-label">Full Name</label>
                    <input type="text" class="form-control" name="name" id="name" value="{{ old('name') }}" required>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <input type="email" class="form-control" name="email" id="email" value="{{ old('email') }}" required>
                </div>

                <div class="col-md-6 mb-3 password-input-group">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" name="password" id="password" required>
                    <span class="password-toggle" onclick="togglePassword('password')">👁️</span>
                </div>

                <div class="col-md-6 mb-3 password-input-group">
                    <label for="password_confirmation" class="form-label">Confirm Password</label>
                    <input type="password" class="form-control" name="password_confirmation" id="password_confirmation" required>
                    <span class="password-toggle" onclick="togglePassword('password_confirmation')">👁️</span>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="department" class="form-label">Department</label>
                    <input type="text" class="form-control" name="department" id="department" value="{{ old('department') }}">
                </div>

                <div class="col-md-6 mb-3">
                    <label for="designation" class="form-label">Designation</label>
                    <input type="text" class="form-control" name="designation" id="designation" value="{{ old('designation') }}">
                </div>

                <div class="col-md-6 mb-3">
                    <label for="joining_date" class="form-label">Joining Date</label>
                    <input type="date" class="form-control" name="joining_date" id="joining_date" value="{{ old('joining_date') }}">
                </div>

                <div class="col-md-6 mb-3">
                    <label for="phone" class="form-label">Phone</label>
                    <input type="text" class="form-control" name="phone" id="phone" value="{{ old('phone') }}">
                </div>

                <div class="col-md-6 mb-3">
                    <label for="gender" class="form-label">Gender</label>
                    <select class="form-select" name="gender" id="gender">
                        <option value="">Select Gender</option>
                        <option value="male" {{ old('gender') == 'male' ? 'selected' : '' }}>Male</option>
                        <option value="female" {{ old('gender') == 'female' ? 'selected' : '' }}>Female</option>
                        <option value="other" {{ old('gender') == 'other' ? 'selected' : '' }}>Other</option>
                    </select>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Sign Up</button>
        </form>
        <div class="signup-link">
            <p>Already have an account? <a href="{{ route('users.login') }}">Login</a></p>
        </div>
    </div>

    <script>
        function togglePassword(inputId) {
            const passwordInput = document.getElementById(inputId);
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="Cache-Control" content="no-store" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>User Dashboard - NexHRM</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            --card-bg: rgba(255, 255, 255, 0.1);
            --card-hover-bg: rgba(255, 255, 255, 0.25);
            --text-light: #ffffff;
            --text-dark: #333333;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            font-family: 'Segoe UI', sans-serif;
            color: var(--text-light);
        }

        .sidebar {
            min-height: 100vh;
            background-color: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            padding: 20px;
            width: 250px;
        }

        .sidebar h3 {
            font-weight: bold;
            margin-bottom: 30px;
        }

        .sidebar a {
            color: var(--text-light);
            text-decoration: none;
            display: block;
            padding: 12px 20px;
            border-radius: 10px;
            transition: background-color var(--transition-speed);
        }

        .sidebar a:hover,
        .sidebar a.active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .navbar {
            background-color: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: var(--text-light);
        }

        .navbar-text {
            font-size: 1.1rem;
            font-weight: 500;
        }

        .btn-danger {
            font-weight: bold;
        }

        .card-custom {
            border-radius: 15px;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            transition: transform var(--transition-speed), background-color var(--transition-speed);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }

        .card-custom:hover {
            background: var(--card-hover-bg);
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .card-text {
            font-size: 1.2rem;
            font-weight: 500;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .badge {
            font-size: 0.85em;
            padding: 0.5em 0.75em;
        }

        .attendance-status {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
        }

        .btn-success,
        .btn-danger {
            transition: all 0.3s ease;
        }

        .btn-success:hover:not(:disabled),
        .btn-danger:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn-success:disabled,
        .btn-danger:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        thead tr td:first-child {
   border-top-left-radius: 10px;
   border-top-right-radius: 10px;
}
    </style>
</head>

<body>
    <div class="d-flex">
        <!-- Sidebar -->
        <div class="sidebar">
            <h3>User Panel</h3>
            <a href="#" class="nav-link active" onclick="showSection('dashboard', this)">Dashboard</a>
            <a href="#" class="nav-link" onclick="showSection('tasks', this)">Tasks</a>
            <a href="#" class="nav-link" onclick="showSection('profile', this)">Profile</a>
        </div>

        <!-- Main Content -->
        <div class="flex-grow-1">
            <!-- Top Navbar -->
            <nav class="navbar navbar-expand-lg shadow-sm px-4 py-3">
                <div class="container-fluid">
                    <span class="navbar-text" id="user-greeting">Welcome, {{ Auth::user()->name }}</span>
                    <form method="POST" action="{{ route('logout') }}">
                        @csrf
                        <button type="submit" class="btn btn-danger btn-sm ms-auto">Logout</button>
                    </form>
                </div>
            </nav>

            <!-- Dashboard Section -->
            <div id="dashboard" class="content-section active container-fluid mt-4">
                <div class="row g-4">
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4">
                            <h5 class="card-title">Tasks Assigned</h5>
                            <p class="card-text">{{ $taskStats['assigned'] }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4">
                            <h5 class="card-title">Completed</h5>
                            <p class="card-text">{{ $taskStats['completed'] }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4">
                            <h5 class="card-title">Pending</h5>
                            <p class="card-text">{{ $taskStats['pending'] }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4">
                            <h5 class="card-title">In Progress</h5>
                            <p class="card-text">{{ $taskStats['in_progress'] }}</p>
                        </div>
                    </div>
                </div>
                <!-- Check-in/Check-out Section -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card card-custom text-white p-4">
                            <h4 class="card-title mb-3 text-center">Attendance</h4>

                            <!-- Check-in/Check-out buttons -->
                            <div class="d-flex gap-3 mb-4" style="justify-content: center;">
                                <form method="POST" action="{{ route('attendance.checkin') }}">
                                    @csrf
                                    <button type="submit" class="btn btn-success btn-lg"
                                        {{ $hasCheckedInToday ? 'disabled' : '' }}>
                                        <i class="bi bi-clock-fill me-2"></i>Check In
                                    </button>
                                </form>

                                <form method="POST" action="{{ route('attendance.checkout') }}">
                                    @csrf
                                    <button type="submit" class="btn btn-danger btn-lg"
                                        {{ !$hasCheckedInToday || $hasCheckedOutToday ? 'disabled' : '' }}>
                                        <i class="bi bi-clock-history me-2"></i>Check Out
                                    </button>
                                </form>
                            </div>

                            <!-- Today's attendance status -->
                            <div class="attendance-status d-flex flex-row align-items-center justify-content-center">
                                <h5>Today's Status:</h5>
                                @if($hasCheckedInToday)
                                <div class="d-flex align-items-center gap-2">
                                    <span class="badge bg-success">Checked In</span>
                                    <span>at {{ $todayAttendance->check_in->format('H:i:s') }}</span>
                                </div>

                                @if($hasCheckedOutToday)
                                <div class="d-flex align-items-center gap-2 mt-2">
                                    <span class="badge bg-info">Checked Out</span>
                                    <span>at {{ $todayAttendance->check_out->format('H:i:s') }}</span>
                                </div>
                                <div class="d-flex align-items-center gap-2 mt-2">
                                    <span class="badge bg-primary">Worked: {{ $todayAttendance->worked_hours }} hours</span>
                                </div>
                                @endif
                                @else
                                <span class="badge bg-secondary">Not Checked In Yet</span>
                                @endif
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Profile Section -->
            <!-- Profile Section -->
            <div id="profile" class="content-section container-fluid mt-4">
                <div class="card card-custom text-white p-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="card-title mb-0">Your Profile</h4>
                        <button class="btn btn-light text-dark" onclick="toggleEditMode()">Edit Details</button>
                    </div>

                    <form id="profileForm" method="POST" action="{{ route('users.profile.update') }}">
                        @csrf
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control bg-transparent text-white" name="name"
                                    value="{{ Auth::user()->name }}" readonly id="nameField">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control bg-transparent text-white"
                                    value="{{ Auth::user()->email }}" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Department</label>
                                <input type="text" class="form-control bg-transparent text-white" name="department"
                                    value="{{ Auth::user()->department ?? 'Not set' }}" readonly id="departmentField">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Designation</label>
                                <input type="text" class="form-control bg-transparent text-white" name="designation"
                                    value="{{ Auth::user()->designation ?? 'Not set' }}" readonly id="designationField">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Joining Date</label>
                                <input type="date" class="form-control bg-transparent text-white" name="joining_date"
                                    value="{{ Auth::user()->joining_date ? Auth::user()->joining_date->format('Y-m-d') : '' }}"
                                    readonly id="joiningDateField">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" class="form-control bg-transparent text-white" name="phone"
                                    value="{{ Auth::user()->phone ?? 'Not set' }}" readonly id="phoneField">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Gender</label>
                                <select class="form-select bg-transparent text-white" name="gender" disabled id="genderField">
                                    <option value="">Select Gender</option>
                                    <option value="male" {{ Auth::user()->gender == 'male' ? 'selected' : '' }}>Male</option>
                                    <option value="female" {{ Auth::user()->gender == 'female' ? 'selected' : '' }}>Female</option>
                                    <option value="other" {{ Auth::user()->gender == 'other' ? 'selected' : '' }}>Other</option>
                                </select>
                            </div>
                        </div>

                        <div class="d-none" id="saveButtonContainer">
                            <button type="submit" class="btn btn-success me-2">Save Changes</button>
                            <button type="button" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Tasks Section -->
            <!-- Tasks Section -->
            <div id="tasks" class="content-section container-fluid mt-4">
                <div class="card card-custom text-white p-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="card-title">Task Manager</h4>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-dark table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Assigned To</th>
                                    <th>Deadline</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($tasks as $task)
                                <tr>
                                    <td>{{ $task->title }}</td>
                                    <td>{{ Str::limit($task->description, 50) }}</td>
                                    <td>
                                        @switch($task->status)
                                        @case('unknown')
                                        <span class="badge bg-secondary">Unknown</span>
                                        @break
                                        @case('pending')
                                        <span class="badge bg-warning text-dark">Pending</span>
                                        @break
                                        @case('in_progress')
                                        <span class="badge bg-info text-dark">In Progress</span>
                                        @break
                                        @case('completed')
                                        <span class="badge bg-success">Completed</span>
                                        @break
                                        @default
                                        <span class="badge bg-light text-dark">{{ ucfirst($task->status) }}</span>
                                        @endswitch
                                    </td>
                                    <td>
                                        @if ($task->assigned_to === null)
                                        <span class="badge bg-danger">Unassigned</span>
                                        @else
                                        <span class="badge bg-primary">{{ $task->user->name ?? 'User #' . $task->assigned_to }}</span>
                                        @endif
                                    </td>
                                    <td>{{ $task->deadline ? \Carbon\Carbon::parse($task->deadline)->format('d M Y') : '—' }}</td>
                                    <td>
                                        <select class="form-select form-select-sm task-status"
                                            data-task-id="{{ $task->id }}"
                                            data-original-status="{{ $task->status }}"
                                            onchange="enableUpdateButton(this)">
                                            <option value="pending" {{ $task->status == 'pending' ? 'selected' : '' }}>Pending</option>
                                            <option value="in_progress" {{ $task->status == 'in_progress' ? 'selected' : '' }}>In Progress</option>
                                            <option value="completed" {{ $task->status == 'completed' ? 'selected' : '' }}>Completed</option>
                                        </select>
                                        <button class="btn btn-sm btn-outline-light update-btn"
                                            data-task-id="{{ $task->id }}"
                                            onclick="updateTaskStatus(this)"
                                            disabled>
                                            Save
                                        </button>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function showSection(sectionId, linkElement) {
            document.querySelectorAll('.content-section').forEach(el => el.classList.remove('active'));
            document.getElementById(sectionId).classList.add('active');

            document.querySelectorAll('.sidebar .nav-link').forEach(link => link.classList.remove('active'));
            linkElement.classList.add('active');
        }

        function getStatusColor(status) {
            switch (status) {
                case 'pending':
                    return 'warning text-dark';
                case 'in_progress':
                    return 'info text-dark';
                case 'completed':
                    return 'success';
                default:
                    return 'secondary';
            }
        }

        function enableUpdate(selectElement) {
            const row = selectElement.closest('tr');
            const button = row.querySelector('button');
            button.disabled = !selectElement.value;
        }

        function updateTaskStatus(taskId, buttonElement) {
            const row = buttonElement.closest('tr');
            const selectElement = row.querySelector('select');
            const newStatus = selectElement.value;

            if (!newStatus) {
                alert('Please select a status first');
                return;
            }

            buttonElement.disabled = true;
            buttonElement.innerText = "Updating...";

            // Get the CSRF token from the meta tag
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            fetch(`/tasks/${taskId}/status`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": csrfToken,
                        "Accept": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({
                        status: newStatus
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        buttonElement.innerText = "Updated";
                        setTimeout(() => {
                            // Update the status display
                            const statusCell = row.querySelector('td:nth-child(3)');
                            statusCell.innerHTML = `<span class="badge bg-${getStatusColor(newStatus)}">${newStatus}</span>`;

                            // Remove the update button
                            const actionCell = row.querySelector('td:nth-child(5)');
                            actionCell.innerHTML = '';
                        }, 1000);
                    } else {
                        throw new Error(data.message || 'Update failed');
                    }
                })
                .catch(err => {
                    console.error("Update error:", err);
                    alert("Failed to update task. Please try again.");
                    buttonElement.innerText = "Update";
                    buttonElement.disabled = false;
                });
        }
        // Enable update button when status changes
        function enableUpdateButton(selectElement) {
            const taskId = selectElement.dataset.taskId;
            const button = document.querySelector(`.update-btn[data-task-id="${taskId}"]`);
            const originalStatus = selectElement.dataset.originalStatus || selectElement.options[selectElement.selectedIndex].text;

            if (selectElement.value !== originalStatus) {
                button.disabled = false;
                button.classList.remove('btn-outline-light');
                button.classList.add('btn-primary');
            } else {
                button.disabled = true;
                button.classList.remove('btn-primary');
                button.classList.add('btn-outline-light');
            }
        }

        // Update task status
        function updateTaskStatus(buttonElement) {
            const taskId = buttonElement.dataset.taskId;
            const selectElement = document.querySelector(`.task-status[data-task-id="${taskId}"]`);
            const newStatus = selectElement.value;

            buttonElement.disabled = true;
            buttonElement.innerText = "Updating...";

            // Get the CSRF token from the meta tag
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            fetch(`/tasks/${taskId}/status`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": csrfToken,
                        "Accept": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({
                        status: newStatus
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update the original status
                        selectElement.dataset.originalStatus = newStatus;

                        buttonElement.innerText = "Saved";
                        buttonElement.classList.remove('btn-primary');
                        buttonElement.classList.add('btn-outline-light');

                        setTimeout(() => {
                            buttonElement.innerText = "Save";
                        }, 2000);
                    } else {
                        throw new Error(data.message || 'Update failed');
                    }
                })
                .catch(err => {
                    console.error("Update error:", err);
                    alert("Failed to update task. Please try again.");
                    buttonElement.innerText = "Save";
                    buttonElement.disabled = false;
                });
        }

        // Profile edit functions
        function toggleEditMode() {
    const fields = ['nameField', 'departmentField', 'designationField', 'joiningDateField', 'phoneField', 'genderField'];
    const saveButtonContainer = document.getElementById('saveButtonContainer');

    fields.forEach(field => {
        const element = document.getElementById(field);
        if (element.tagName === 'SELECT') {
            element.disabled = false;
        } else {
            element.readOnly = false;
        }

        element.classList.remove('bg-transparent');
        element.classList.add('bg-dark');
    });

    saveButtonContainer.classList.remove('d-none');
    saveButtonContainer.classList.add('d-block');
}


        function cancelEdit() {
            toggleEditMode();
            // Reset form values if needed
            document.getElementById('profileForm').reset();
        }

        // Initialize original status for all task selects
        document.addEventListener('DOMContentLoaded', function() {
            const statusSelects = document.querySelectorAll('.task-status');
            statusSelects.forEach(select => {
                select.dataset.originalStatus = select.value;
            });
        });
    </script>
</body>

</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login - NexHRM</title>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #a8a5e2, #083c4d);
            display: flex;
            justify-content: center;
            align-items: center;
            color: #fff;
            font-family: Segoe UI, sans-serif;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
        }

        .form-control {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: #fff;
        }

        .form-control:focus {
            background: rgba(255, 255, 255, 0.3);
            color: #fff;
            box-shadow: none;
        }

        .btn-primary {
            background: #00bfff;
            border: none;
            font-weight: bold;
        }

        .btn-primary:hover {
            background: #0099cc;
        }

        .signup-link {
            text-align: center;
            margin-top: 20px;
        }

        .signup-link a {
            color: #00bfff;
            text-decoration: underline;
        }

        .signup-link a:hover {
            color: #0099cc;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2 class="text-center mb-4">Login</h2>
         @if ($errors->any())
            <div class="alert alert-danger mb-3">
                <ul class="mb-0">
                    @foreach ($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif
        <form method="POST" action="{{ route('users.login.submit') }}">
    @csrf

    <!-- Email -->
    <div class="mb-3">
        <input type="email" name="email" class="form-control" placeholder="Email"
               required value="{{ old('email') }}">
        @error('email')
            <div class="text-danger mt-1 small">{{ $message }}</div>
        @enderror
    </div>

    <!-- Password -->
    <div class="mb-3">
        <input type="password" name="password" class="form-control" placeholder="Password" required>
        @error('password')
            <div class="text-danger mt-1 small">{{ $message }}</div>
        @enderror
    </div>

    <!-- Login Button -->
    <button type="submit" class="btn btn-primary w-100">Login</button>
</form>

        <div class="signup-link">
            <p>Don't have an account? <a href="{{ route('users.signup') }}">Sign Up</a></p>
        </div>
    </div>
</body>
</html><!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NexHRM - Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            min-height: 100vh;
            background: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Segoe UI', sans-serif;
        }

        .container-box {
            text-align: center;
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 50px;
            font-weight: bold;
        }

        .role-box {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 60px 40px;
            margin: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
            min-width: 300px;
        }

        .role-box:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-5px);
        }

        .role-box h2 {
            font-size: 2rem;
            margin: 0;
        }

        .roles-wrapper {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
        }
    </style>
</head>

<body>
    <div class="container-box">
        <h1>Welcome to NexHRM</h1>
        <div class="roles-wrapper">
            <div class="role-box" onclick="location.href='{{ route('admin.login') }}'">
                <h2>I'm him!</h2>
            </div>
            <div class="role-box" onclick="location.href='{{ route('users.login') }}'">
                <h2>I'm employee!</h2>
            </div>
        </div>
    </div>
</body>

</html><!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Admin Dashboard - NexHRM</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #a8a5e2ff, #687BA6);
            --card-bg: rgba(255, 255, 255, 0.1);
            --card-hover-bg: rgba(255, 255, 255, 0.25);
            --text-light: #ffffff;
            --text-dark: #687BA6;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            font-family: 'Segoe UI', sans-serif;
            color: var(--text-light);
        }

        .sidebar {
            min-height: 100vh;
            background-color: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            padding: 20px;
            width: 250px;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        .sidebar h3 {
            font-weight: bold;
            margin-bottom: 30px;
        }

        .sidebar a {
            color: var(--text-light);
            text-decoration: none;
            display: block;
            padding: 12px 20px;
            border-radius: 10px;
            transition: background-color var(--transition-speed);
        }

        .sidebar a:hover,
        .sidebar a.active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .navbar {
            background-color: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: var(--text-light);
        }

        .navbar-text {
            font-size: 1.1rem;
            font-weight: 500;
        }

        .btn-danger {
            font-weight: bold;
        }

        .card-custom {
            border-radius: 15px;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            transition: transform var(--transition-speed), background-color var(--transition-speed);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .card-text {
            font-size: 2.5rem;
            font-weight: bold;
        }

        .text-white {
            color: var(--text-light) !important;
        }

        .text-dark {
            color: var(--text-dark) !important;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .badge {
            font-size: 0.85em;
            padding: 0.5em 0.75em;
        }
    </style>
</head>

<body>
    <div class="d-flex">
        <!-- Sidebar -->
        <div class="sidebar">
            <h3>Admin Panel</h3>
            <a href="#" class="nav-link active" onclick="showSection('dashboard', this)">Dashboard</a>
            <a href="#" class="nav-link" onclick="showSection('attendance', this)">Attendance</a>
            <a href="#" class="nav-link" onclick="showSection('users', this)">Users</a>
            <a href="#" class="nav-link" onclick="showSection('tasks', this)">Tasks</a>
            <a href="#" class="nav-link" onclick="showSection('tasks', this)">
                <form method="POST" action="{{ route('admin.logout') }}" class="ms-auto">
                    @csrf
                    <button type="submit" class="btn btn-danger btn-sm">Logout</button>
                </form>
            </a>
        </div>

        <!-- Main Content -->
        <div class="flex-grow-1">
            <!-- Top Navbar -->
            <nav class="navbar navbar-expand-lg shadow-sm px-4 py-3">
                <div class="container-fluid">
                    <span class="navbar-text">Welcome, {{ auth('admin')->user()->name }}</span>

                </div>
            </nav>

            <!-- Dashboard Section -->
            <div id="dashboard" class="content-section active container-fluid mt-4">
                <div class="row g-4">
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4" onclick="showSection('users', document.querySelector('.sidebar a:nth-child(3)'))" style="cursor:pointer;">
                            <h5 class="card-title">Users</h5>
                            <p class="card-text">{{ $usersCount ?? 0 }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4" onclick="showSection('tasks', document.querySelector('.sidebar a:nth-child(4)'))" style="cursor:pointer;">
                            <h5 class="card-title">Tasks</h5>
                            <p class="card-text">{{ $tasksCount ?? 0 }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4" onclick="showSection('attendance', document.querySelector('.sidebar a:nth-child(2)'))" style="cursor:pointer;">
                            <h5 class="card-title">Attendance</h5>
                            <p class="card-text">{{ $attendanceRecords->count() ?? 0 }}</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center card-custom text-white p-4">
                            <h5 class="card-title">Idle Users</h5>
                            <p class="card-text">{{ $idleUsersCount ?? 0 }}</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Attendance Section -->
            <div id="attendance" class="content-section container-fluid mt-4">
                <div class="card card-custom text-white p-4">
                    <h4 class="card-title mb-4">Attendance Records</h4>
                    <div class="table-responsive">
                        <table class="table table-dark table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Date</th>
                                    <th>Check In</th>
                                    <th>Check Out</th>
                                    <th>Worked Hours</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($attendanceRecords as $record)
                                <tr>
                                    <td>{{ $record->user->name }}</td>
                                    <td>{{ $record->check_in->format('M d, Y') }}</td>
                                    <td>{{ $record->check_in->format('H:i:s') }}</td>
                                    <td>
                                        @if($record->check_out)
                                        {{ $record->check_out->format('H:i:s') }}
                                        @else
                                        <span class="badge bg-warning text-dark">Not Checked Out</span>
                                        @endif
                                    </td>
                                    <td>
                                        @if($record->worked_hours > 0)
                                        {{ $record->worked_hours }} hours
                                        @else
                                        <span class="badge bg-secondary">Not Calculated</span>
                                        @endif
                                    </td>
                                    <td>
                                        <span class="badge bg-{{ $record->status === 'present' ? 'warning' : ($record->status === 'completed' ? 'success' : 'secondary') }}">
                                            {{ ucfirst($record->status) }}
                                        </span>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Users Section -->
            <div id="users" class="content-section container-fluid mt-4">
                <div class="card card-custom text-white p-4">
                    <h4 class="card-title mb-4">User Portal</h4>
                    <div class="table-responsive">
                        <table class="table table-dark table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Department</th>
                                    <th>Designation</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($users as $user)
                                <tr>
                                    <td>{{ $user->name }}</td>
                                    <td>{{ $user->email }}</td>
                                    <td>{{ $user->department ?? 'N/A' }}</td>
                                    <td>{{ $user->designation ?? 'N/A' }}</td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-light text-dark"
                                            onclick="openAssignModal({{ $user->id }}, '{{ addslashes($user->name) }}')">
                                            Assign Task
                                        </button>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Tasks Section -->
            <div id="tasks" class="content-section container-fluid mt-4">
                <div class="card card-custom text-white p-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="card-title">Task Manager</h4>
                        <button class="btn btn-light text-dark" onclick="openTaskModal()">Create Task</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-dark table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Assigned To</th>
                                    <th>Deadline</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($tasks as $task)
                                <tr>
                                    <td>{{ $task->title }}</td>
                                    <td>{{ Str::limit($task->description, 50) }}</td>

                                    <td>
                                        @switch($task->status)
                                        @case('unknown')
                                        <span class="badge bg-secondary">Unknown</span>
                                        @break
                                        @case('pending')
                                        <span class="badge bg-warning text-dark">Pending</span>
                                        @break
                                        @case('in_progress')
                                        <span class="badge bg-info text-dark">In Progress</span>
                                        @break
                                        @case('completed')
                                        <span class="badge bg-success">Completed</span>
                                        @break
                                        @default
                                        <span class="badge bg-light text-dark">{{ ucfirst($task->status) }}</span>
                                        @endswitch
                                    </td>

                                    <td>
                                        @if ($task->assigned_to === null)
                                        <span class="badge bg-danger">Unassigned</span>
                                        @else
                                        <span class="badge bg-primary">{{ $task->user->name ?? 'User #' . $task->assigned_to }}</span>
                                        @endif
                                    </td>

                                    <td>{{ $task->deadline ? \Carbon\Carbon::parse($task->deadline)->format('d M Y') : '—' }}</td>

                                    <td>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-sm btn-success save-btn"
                                                onclick="openEditModal('{{ $task->id }}', '{{ addslashes($task->title) }}', '{{ addslashes($task->description) }}', '{{ $task->deadline ? $task->deadline->format('Y-m-d') : '' }}')">
                                                Edit
                                            </button>

                                            <form action="{{ route('admin.tasks.destroy', $task->id) }}" method="POST" class="d-inline">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="btn btn-sm btn-danger"
                                                    onclick="return confirm('Are you sure you want to delete this task?')">
                                                    Delete
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Create Task Modal -->
            <div class="modal fade" id="taskModal" tabindex="-1">
                <div class="modal-dialog">
                    <form method="POST" action="{{ route('admin.tasks.store') }}" id="taskForm">
                        @csrf
                        <div class="modal-content card-custom text-white">
                            <div class="modal-header">
                                <h5 class="modal-title">Create New Task</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Task Title</label>
                                    <input type="text" name="title" id="title" class="form-control" placeholder="Task Title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea name="description" id="description" class="form-control" placeholder="Task Description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="deadline" class="form-label">Deadline (optional)</label>
                                    <input type="date" name="deadline" id="deadline" class="form-control">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-light text-dark">Create Task</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Edit Task Modal -->
            <div class="modal fade" id="editTaskModal" tabindex="-1">
                <div class="modal-dialog">
                    <form method="POST" id="editTaskForm">
                        @csrf
                        @method('PUT')
                        <div class="modal-content card-custom text-white">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit Task</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <input type="hidden" name="task_id" id="edit-task-id">
                                <div class="mb-3">
                                    <label for="edit-title" class="form-label">Task Title</label>
                                    <input type="text" name="title" id="edit-title" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label for="edit-description" class="form-label">Description</label>
                                    <textarea name="description" id="edit-description" class="form-control" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="edit-deadline" class="form-label">Deadline (optional)</label>
                                    <input type="date" name="deadline" id="edit-deadline" class="form-control">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-light text-dark">Update Task</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>


            <!-- Assign Task Modal -->
            <div class="modal fade" id="assignModal" tabindex="-1">
                <div class="modal-dialog">
                    <form method="POST" action="{{ route('admin.tasks.assign') }}" id="assignForm">
                        @csrf
                        <input type="hidden" name="assigned_to" id="assign-user-id">
                        <div class="modal-content card-custom text-white">
                            <div class="modal-header">
                                <h5 class="modal-title">Assign Task to <span id="assign-user-name"></span></h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="assign-task-select" class="form-label">Select Task</label>
                                    <select name="task_id" id="assign-task-select" class="form-select" required>
                                        <option value="">Select a task</option>
                                        @foreach($tasks->where('assigned_to', null) as $task)
                                        <option value="{{ $task->id }}">{{ $task->title }} ({{ $task->status }})</option>
                                        @endforeach
                                    </select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-light text-dark">Assign Task</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize CSRF token for AJAX
        $.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        });

        // Switch between dashboard sections
        function showSection(sectionId, linkElement) {
            document.querySelectorAll('.content-section').forEach(el => el.classList.remove('active'));
            document.getElementById(sectionId).classList.add('active');

            document.querySelectorAll('.sidebar .nav-link').forEach(link => link.classList.remove('active'));
            linkElement.classList.add('active');
        }

        // Enable save button when user is selected
        function enableSaveButton(selectElement) {
            const taskId = selectElement.dataset.taskId;
            const saveButton = document.querySelector(`.save-btn[data-task-id="${taskId}"]`);
            saveButton.disabled = !selectElement.value;
        }

        // Assign task via AJAX
        function assignTask(buttonElement) {
            const taskId = buttonElement.dataset.taskId;
            const selectElement = document.querySelector(`.assign-select[data-task-id="${taskId}"]`);
            const userId = selectElement.value;

            if (!userId) {
                alert('Please select a user first');
                return;
            }

            buttonElement.disabled = true;
            buttonElement.innerText = "Assigning...";

            $.ajax({
                url: "{{ route('admin.tasks.assign') }}",
                method: "POST",
                data: {
                    task_id: taskId,
                    assigned_to: userId
                },
                success: function(response) {
                    alert('Task assigned successfully');
                    location.reload();
                },
                error: function(xhr) {
                    alert('Error assigning task: ' + xhr.responseJSON.message);
                    buttonElement.disabled = false;
                    buttonElement.innerText = "Save";
                }
            });
        }

        // Open modal to create a new task
        function openTaskModal() {
            const modal = new bootstrap.Modal(document.getElementById('taskModal'));
            document.getElementById('taskForm').reset();
            modal.show();
        }

        // Open modal to assign a task to a user
        function openAssignModal(userId, userName) {
            const assignModal = new bootstrap.Modal(document.getElementById('assignModal'));
            document.getElementById('assign-user-name').textContent = userName;
            document.getElementById('assign-user-id').value = userId;
            assignModal.show();
        }

        function openEditModal(taskId, title, description, deadline) {
            const editModal = new bootstrap.Modal(document.getElementById('editTaskModal'));

            // Fill the form fields
            document.getElementById('edit-task-id').value = taskId;
            document.getElementById('edit-title').value = title;
            document.getElementById('edit-description').value = description;
            document.getElementById('edit-deadline').value = deadline ? deadline : '';

            // Set form action dynamically
            document.getElementById('editTaskForm').action = `/admin/tasks/${taskId}`; // adjust route if needed

            editModal.show();
        }
    </script>
</body>

</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Login - NexHRM</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            background: linear-gradient(135deg, #a8a5e2ff, #083c4dff);
            --card-bg: rgba(255, 255, 255, 0.1);
            --card-hover-bg: rgba(255, 255, 255, 0.25);
            --text-light: #ffffff;
            --text-dark: #333333;
            --transition-speed: 0.3s;
        }

        body {
            min-height: 100vh;
            margin: 0;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Segoe UI', sans-serif;
            color: var(--text-light);
        }

        .login-card {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
            text-align: center;
        }

        .login-card h2 {
            font-size: 2.5rem;
            margin-bottom: 30px;
            font-weight: 700;
        }

        .form-control {
            background-color: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: var(--text-light);
        }

        .form-control::placeholder {
            color: #e0e0e0;
        }

        .form-control:focus {
            box-shadow: none;
            background-color: rgba(255, 255, 255, 0.3);
        }

        .btn-primary {
            background-color: #00bfff;
            border: none;
            font-weight: bold;
            transition: background-color var(--transition-speed);
        }

        .btn-primary:hover {
            background-color: #0099cc;
        }

        .error-message {
            color: #ffdddd;
            font-size: 0.9rem;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="login-card">
        <h2>Admin Sign In</h2>

        @if ($errors->any())
            <div class="error-message">
                @foreach ($errors->all() as $error)
                    <p>{{ $error }}</p>
                @endforeach
            </div>
        @endif

        <form method="POST" action="{{ route('admin.login.submit') }}">
            @csrf
            <div class="mb-3">
                <input type="email" name="email" class="form-control" placeholder="Email" required>
            </div>
            <div class="mb-3">
                <input type="password" name="password" class="form-control" placeholder="Password" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </form>
    </div>
</body>
</html>
<!-- resources/views/layouts/admin.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="{{ asset('css/admin.css') }}">
</head>
<body>
    <div class="admin-wrapper">
        @yield('content')
    </div>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Your OTP Code</title>
</head>
<body style="font-family: sans-serif;">
    <div style="max-width: 600px; margin: auto;">
        <h2>Hello!</h2>
        <p>Your OTP code is:</p>
        <h1 style="font-size: 32px; color: #4CAF50;">{{ $otp }}</h1>
        <p>This code will expire in 5 minutes.</p>
        <p>If you didn’t request this, please ignore the email.</p>
    </div>
</body>
</html>
@import 'tailwindcss';

@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../../storage/framework/views/*.php';
@source '../**/*.blade.php';
@source '../**/*.js';

@theme {
    --font-sans: 'Instrument Sans', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
        'Segoe UI Symbol', 'Noto Color Emoji';
}
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Task>
 */
class TaskFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => $this->faker->sentence(3),
            'description' => $this->faker->paragraph(),
            'status' => 'unknown',
            'assigned_to' => 'not_assigned',
            'deadline' => $this->faker->dateTimeBetween('now', '+3 months'),
            'created_at' => now(),
            'updated_at' => now(),
        ];
    }

    /**
     * Indicate that the task is assigned to a user.
     */
    public function assigned(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending',
        ]);
    }

    /**
     * Indicate that the task is completed.
     */
    public function completed(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'completed',
        ]);
    }
}<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('tasks', function (Blueprint $table) {
            $table->foreignId('assigned_to')
                  ->nullable()
                  ->constrained('users')
                  ->onDelete('set null');
        });
    }

    public function down()
    {
        Schema::table('tasks', function (Blueprint $table) {
            $table->dropForeign(['assigned_to']);
            $table->dropColumn('assigned_to');
        });
    }
};<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sessions');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('tasks_table_final', function (Blueprint $table) {
            //
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('tasks_table_final', function (Blueprint $table) {
            //
        });
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        //
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        //
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('tasks', function (Blueprint $table) {
            $table->renameColumn('name', 'title');
        });
    }

    public function down()
    {
        Schema::table('tasks', function (Blueprint $table) {
            $table->renameColumn('title', 'name');
        });
    }
};<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('attendances', function (Blueprint $table) {
            $table->id();
            $table->enum('status', ['present', 'absent', 'late', 'completed'])->default('present');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->timestamp('check_in')->nullable();
            $table->timestamp('check_out')->nullable();
            $table->decimal('worked_hours', 5, 2)->default(0);
            $table->timestamps();
            
            // Add index for better performance
            $table->index(['user_id', 'check_in']);
        });
    }

    public function down()
    {
        Schema::dropIfExists('attendances');
    }
};<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
  public function up()
{
    Schema::table('tasks', function (Blueprint $table) {
        $table->renameColumn('name', 'title');
    });
}

public function down()
{
    Schema::table('tasks', function (Blueprint $table) {
        $table->renameColumn('title', 'name');
    });
}
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('tasks', function (Blueprint $table) {
            //
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('tasks', function (Blueprint $table) {
            //
        });
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('tasks', function (Blueprint $table) {
            //
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('tasks', function (Blueprint $table) {
            //
        });
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->string('password');

        // Optional fields
        $table->string('department')->nullable();
        $table->string('designation')->nullable();
        $table->date('joining_date')->nullable();
        $table->string('phone')->nullable();
        $table->enum('gender', ['male', 'female', 'other'])->nullable();

        $table->rememberToken(); // for "remember me" functionality
        $table->timestamps();    // created_at and updated_at
    });
}
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
public function up()
{
    Schema::create('tasks', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->text('description')->nullable();
        $table->date('deadline')->nullable();
        $table->enum('status', ['unknown', 'pending', 'in_progress', 'completed'])->default('unknown');

        $table->timestamps();
    });
}


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tasks');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('admins', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('email')->unique();
    $table->string('password');
    $table->string('role')->default('admin'); // optional, for super_admin distinction
    $table->timestamps();
});

    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('admins');
    }
};
<?php

namespace Database\Seeders;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Admin;
use Illuminate\Support\Str;

class AdminSeeder extends Seeder
{
    public function run(): void
    {
        Admin::create([
            'name' => 'Super Admin',
            'email' => 'admin@gmail.com',
            'password' => bcrypt('123'), // Change this after first login
            'remember_token' => Str::random(10),
        ]);
    }
}
